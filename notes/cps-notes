;; archived code

;; this version of cps-letrec transforms letrec into lamdas+set
(define (cps-letrec e k)
  (let* ([bindings (second e)]
         [vars (map first bindings)]
         [val-exprs (map second bindings)]
         [body (drop e 2)])
    (cps
     `((lambda ,vars 
         (begin
           ,@(map (lambda (var val) `(set! ,var ,val))
                  vars val-exprs)
           ,@body))
       ,@(map (lambda (var) ''undef) vars))
     k)))

(define (cps-set e k)
  (let ([r (ngensym 'r)])
    (cps (set->val e)
         `(lambda (,r)
            (,k (set! ,(set->var e) ,r))))))

;; compilation to lambdas
(define (with-cps-primitives e ps)
  `((lambda (cps-prim)
      ((lambda ,(map (lambda (p) (cps-rename p)) ps)
         ,e)
       ,@(map (lambda (p) `(cps-prim ,p)) ps)))
    (lambda (f)
      (lambda (k . args)
        (k (apply f args))))))

;; from cps-letrec:
(begin
  (when (not (tagged-list? val 'church-make-stateless-xrp))
        (for-each display (list "WARNING: potential non-proc in letrec -- " val "\n")))
  (let ([k1 (ngensym 'klr2)])
    `(,f (call/cc
          (lambda (,k1)
            ,(cps val k1))))))