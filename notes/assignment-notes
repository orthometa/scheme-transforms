[(letrec? e)
 (except (append (set-join (map (compose mutated-free-vars def->val)
                                (letrec->defns e)))
                 (mutated-free-vars (letrec->body e)))
         (map def->name (letrec->defns e)))]

(define (amt-letrec vars e)
   (let-values ([(ism isu)
                 (partition-vars (map def->name (letrec->defns e))
                                 (pair (letrec->body e)
                                       (map def->val (letrec->defns e))))])
     (let ([new-vars (except (union vars ism) isu)])
       `(letrec ,(map (lambda (def)
                        `(,(def->name def)
                          ,(maybe-cell (def->name def)
                                       ism
                                       (amt new-vars (def->val def)))))
                      (letrec->defns e))
          ,(amt new-vars (letrec->body e))))))